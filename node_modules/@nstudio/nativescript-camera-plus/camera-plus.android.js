"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("./async-await");
var core_1 = require("@angular/core");
var app = require("tns-core-modules/application");
var fs = require("tns-core-modules/file-system");
var utils = require("tns-core-modules/utils/utils");
var types = require("tns-core-modules/utils/types");
var permissions = require("nativescript-permissions");
var image_asset_1 = require("tns-core-modules/image-asset");
var platform_1 = require("tns-core-modules/platform");
var selected_asset_1 = require("./selected-asset");
var camera_plus_common_1 = require("./camera-plus.common");
var CamHelpers = require("./helpers");
var REQUEST_VIDEO_CAPTURE = 999;
var WRAP_CONTENT = -2;
var ALIGN_PARENT_TOP = 10;
var ALIGN_PARENT_BOTTOM = 12;
var ALIGN_PARENT_LEFT = 9;
var ALIGN_PARENT_RIGHT = 11;
var CENTER_HORIZONTAL = 14;
var DIRECTORY_PICTURES = 'DIRECTORY_PICTURES';
var DIRECTORY_MOVIES = 'DIRECTORY_MOVIES';
var FOCUS_MODE_AUTO = 'auto';
var FOCUS_MODE_EDOF = 'edof';
var FOCUS_MODE_CONTINUOUS_PICTURE = 'continuous-picture';
var FOCUS_MODE_CONTINUOUS_VIDEO = 'continuous-video';
var FLASH_MODE_ON = 'on';
var FLASH_MODE_OFF = 'off';
var CAMERA_FACING_FRONT = 1;
var CAMERA_FACING_BACK = 0;
var RESULT_CODE_PICKER_IMAGES = 415161;
var RESULT_OK = -1;
var CAMERA = function () { return android.Manifest.permission.CAMERA; };
var RECORD_AUDIO = function () { return android.Manifest.permission.RECORD_AUDIO; };
var READ_EXTERNAL_STORAGE = function () { return android.Manifest.permission.READ_EXTERNAL_STORAGE; };
var WRITE_EXTERNAL_STORAGE = function () { return android.Manifest.permission.WRITE_EXTERNAL_STORAGE; };
var DEVICE_INFO_STRING = function () { return "device: " + platform_1.device.manufacturer + " " + platform_1.device.model + " on SDK: " + platform_1.device.sdkVersion; };
var CameraPlus = (function (_super) {
    __extends(CameraPlus, _super);
    function CameraPlus() {
        var _this = _super.call(this) || this;
        _this.autoFocus = true;
        _this.flashOnIcon = 'ic_flash_on_white';
        _this.flashOffIcon = 'ic_flash_off_white';
        _this.toggleCameraIcon = 'ic_switch_camera_white';
        _this.confirmPhotos = true;
        _this.saveToGallery = false;
        _this.takePicIcon = 'ic_camera_alt_white';
        _this.galleryIcon = 'ic_photo_library_white';
        _this.insetButtons = false;
        _this.insetButtonsPercent = 0.1;
        _this._flashBtn = null;
        _this._takePicBtn = null;
        _this._toggleCamBtn = null;
        _this._galleryBtn = null;
        _this.camera = null;
        _this._textureSurface = null;
        _this.flashOnIcon = _this.flashOnIcon ? _this.flashOnIcon : 'ic_flash_on_white';
        _this.flashOffIcon = _this.flashOffIcon ? _this.flashOffIcon : 'ic_flash_off_white';
        _this.toggleCameraIcon = _this.toggleCameraIcon ? _this.toggleCameraIcon : 'ic_switch_camera_white';
        _this.takePicIcon = _this.takePicIcon ? _this.takePicIcon : 'ic_camera_alt_white';
        _this.galleryIcon = _this.galleryIcon ? _this.galleryIcon : 'ic_photo_library_white';
        _this.cameraId = CameraPlus.defaultCamera === 'front' ? CAMERA_FACING_FRONT : CAMERA_FACING_BACK;
        _this.videoCap = null;
        _this.ocvCameraView = null;
        _this.grayColor = android.graphics.Color.parseColor('#727272'); // gray color
        return _this;
    }
    Object.defineProperty(CameraPlus.prototype, "camera", {
        get: function () {
            return this._camera;
        },
        set: function (camera) {
            this._camera = camera;
        },
        enumerable: true,
        configurable: true
    });
    CameraPlus.prototype.createNativeView = function () {
        var _this = this;
        try {
            if (this.isCameraAvailable() === false) {
                camera_plus_common_1.CLog("No Camera on this device.");
                return;
            }
            var that_1 = new WeakRef(this);
            this._owner = that_1;
            this._nativeView = new android.widget.RelativeLayout(this._context);
            // this._initCamera0(this._context, this.cameraId);
            permissions.requestPermission(CAMERA()).then(function () {
                camera_plus_common_1.CLog("HAS PERMISSIONS FIRST......");
                _this._initCamera0(_this._context, _this.cameraId); //chinna

                _this._textureView = new android.view.TextureView(_this._context);
                if (_this._textureView) {
                    _this._textureView.setFocusable(true);
                    _this._textureView.setFocusableInTouchMode(true);
                    _this._textureView.requestFocus();
                    _this._nativeView.addView(_this._textureView);
                    if (_this.enableVideo === true) {
                        _this._mediaRecorder = new android.media.MediaRecorder();
                        camera_plus_common_1.CLog("this._mediaRecorder", _this._mediaRecorder);
                    }
                    // _this.ocvCameraView = new org.opencv.android.JavaCameraView(_this._context, _this.cameraId);
                    _this._textureView.setSurfaceTextureListener(new android.view.TextureView.SurfaceTextureListener({
                        _this4: this,
                        get owner() {
                            return that_1.get();
                        },
                        onSurfaceTextureSizeChanged: function (surface, width, height) {
                            camera_plus_common_1.CLog("*** onSurfaceTextureSizeChanged called...");
                            _this.camera = this.owner.ocvCameraView.mCamera;
                            // _this.sendEvent('sliderpoistion');
                            //  _this._setCameraDisplayOrientation(app.android.foregroundActivity, _this.cameraId, _this.camera);
                            // _this._setCameraDisplayOrientation0(app.android.foregroundActivity, _this.cameraId, _this.camera);
                            // _this._ensureCorrectFlashIcon();
                            //   var params = _this.camera.getParameters();
                            //   params.setPreviewSize(1280,720);
                        },
                        onSurfaceTextureAvailable: function (surface, width, height) {
                            camera_plus_common_1.CLog("*** onSurfaceTextureAvailable ***\nthis.cameraId = " + _this.cameraId);
                            _this._surface = surface;
                            _this._textureSurface = new android.view.Surface(surface);

                            //  _this.ocvCameraView.enableView();
                            //  _this._textureSurface = _this.ocvCameraView;
                            var hasPerm = _this.hasCameraPermission();
                            if (hasPerm === true) {
                                camera_plus_common_1.CLog("HAS PERMISSIONS......");
                                //  _this._initCamera(_this.cameraId);
                                _this._initCamera0(_this._context, _this.cameraId);
                                //  _this._initDefaultButtons();
                            }
                            else {
                                camera_plus_common_1.CLog("NOT HAVING PERMISSIONS......");
                                permissions
                                    .requestPermission([CAMERA(),READ_EXTERNAL_STORAGE(),WRITE_EXTERNAL_STORAGE()])
                                    .then(function () {
                                        //  _this._initCamera(_this.cameraId);
                                        _this._initCamera0(_this._context, _this.cameraId);
                                        //  _this._initDefaultButtons();
                                    })
                                    .catch(function (err) {
                                        camera_plus_common_1.CLog('Application does not have permission to use CAMERA.', err);
                                        return;
                                    });
                            }
                        },
                        onSurfaceTextureDestroyed: function (surface) {
                            camera_plus_common_1.CLog("*** onSurfaceTextureDestroyed  ", surface);
                            //  _this._releaseCameraAndPreview();
                            _this._releaseCameraAndPreview0();

                            // _this.ocvCameraView.disableView();
                            // _this.ocvCameraView = null;

                            // _this._nativeView.detachViewFromParent(this.owner.ocvCameraView);
                            // _this._nativeView.removeDetachedView(this.owner.ocvCameraView, true);
                            // this.owner._nativeView.removeView(this.owner.ocvCameraView);
                            return true;
                        },
                        onSurfaceTextureUpdated: function (surface) {
                        }
                    }));
                }
            }, function (err) {
                camera_plus_common_1.CLog('Application does not have permission to use CAMERA.', err);
                return;
            });
            camera_plus_common_1.CLog('video enabled:', CameraPlus.enableVideo);
            camera_plus_common_1.CLog('default camera:', CameraPlus.defaultCamera);
            return this._nativeView;
        }
        catch (ex) {
            camera_plus_common_1.CLog('createNativeView error', ex);
            this.sendEvent(CameraPlus.errorEvent, ex, 'Error creating the native view.');
        }
    };
    CameraPlus.prototype.takePicture = function (options) {
        var _this = this;
        // this.camera.setPreviewCallback(null);
        try {
            camera_plus_common_1.CLog(JSON.stringify(options));
            var hasCamPerm = this.hasCameraPermission();
            if (!hasCamPerm) {
                camera_plus_common_1.CLog('Application does not have permission to use Camera.');
                return;
            }
            var shutterCallback = new android.hardware.Camera.ShutterCallback({
                onShutter: function () {
                }
            });
            this.camera.takePicture(shutterCallback, null, new android.hardware.Camera.PictureCallback({
                onPictureTaken: function (data, camera) {
                    return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            if (data === null) {
                                camera_plus_common_1.CLog("No image data from the Camera onPictureTaken callback.");
                                return [2];
                            }
                            this._onPictureTaken0(options, data);
                            return [2];
                        });
                    });
                }
            }));

            // var fileName = "IMG_" + Date.now() + ".jpg";
            // var folderPath = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DCIM).toString() +
            //                     '/Camera/';
            // if (!fs.Folder.exists(folderPath)) {
            //     fs.Folder.fromPath(folderPath);
            // }
            // var picturePath = fs.path.join(folderPath, fileName);
            // var nativeFile = new java.io.File(picturePath);
            // this.ocvCameraView.mPictureFileName = picturePath;
            // this.camera.takePicture(null, null, this.ocvCameraView);
        }
        catch (e) {
            camera_plus_common_1.CLog('takePicture error', e);
            this.sendEvent(CameraPlus.errorEvent, e, 'Error taking picture.');
            return;
        }
    };
    CameraPlus.prototype.releaseCamera = function () {
        if (this.camera !== null) {
            this.camera.stopPreview();
            this.camera.setPreviewCallback(null);
            this.camera.release();
            this.camera = null;
        }
    };
    CameraPlus.prototype.toggleCamera0 = function () {
        try {
            var camNumber = this.getNumberOfCameras();
            if (camNumber <= 1) {
                camera_plus_common_1.CLog("Android Device has " + camNumber + " camera.");
                return;
            }
            if (this.camera === null) {
                return;
            }
            // if (this.camera !== null) {
            //     this.camera.stopPreview();
            //     this.camera.setPreviewCallback(null);
            //     this.camera.release();
            //     this.camera = null;
            // }
            if (this.cameraId === CAMERA_FACING_FRONT) {
                this.cameraId = CAMERA_FACING_BACK;
            }
            else {
                this.cameraId = CAMERA_FACING_FRONT;
            }
            this._initCamera0(this._context, this.cameraId);
            // this.camera = android.hardware.Camera.open(this.cameraId);
            // this._setCameraDisplayOrientation(app.android.foregroundActivity, this.cameraId, this.camera);
            // this.camera.setPreviewTexture(this._surface);
            // this.camera.startPreview();
            // this.sendEvent(CameraPlus.toggleCameraEvent, this.camera);
            // this._ensureCorrectFlashIcon();
            // this._ensureFocusMode();
        }
        catch (ex) {
            camera_plus_common_1.CLog(ex);
            this.sendEvent(CameraPlus.errorEvent, ex, 'Error trying to toggle camera.');
        }
    };
    CameraPlus.prototype.toggleCamera = function () {
        try {
            var camNumber = this.getNumberOfCameras();
            if (camNumber <= 1) {
                camera_plus_common_1.CLog("Android Device has " + camNumber + " camera.");
                return;
            }
            if (this.camera === null) {
                return;
            }
            if (this.camera !== null) {
                this.camera.stopPreview();
                this.camera.setPreviewCallback(null);
                this.camera.release();
                this.camera = null;
            }
            if (this.cameraId === CAMERA_FACING_FRONT) {
                this.cameraId = CAMERA_FACING_BACK;
            }
            else {
                this.cameraId = CAMERA_FACING_FRONT;
            }
            this.camera = android.hardware.Camera.open(this.cameraId);
            this._setCameraDisplayOrientation(app.android.foregroundActivity, this.cameraId, this.camera);
            this.camera.setPreviewTexture(this._surface);
            this.camera.startPreview();
            this.sendEvent(CameraPlus.toggleCameraEvent, this.camera);
            this._ensureCorrectFlashIcon();
            this._ensureFocusMode();
        }
        catch (ex) {
            camera_plus_common_1.CLog(ex);
            this.sendEvent(CameraPlus.errorEvent, ex, 'Error trying to toggle camera.');
        }
    };
    CameraPlus.prototype.record = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var permResult, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        if (!this.enableVideo) return [3, 2];
                        return [4, this.requestVideoRecordingPermissions()];
                    case 1:
                        permResult = _a.sent();
                        camera_plus_common_1.CLog(permResult);
                        if (this.isRecording) {
                            camera_plus_common_1.CLog('CameraPlus stop video recording.');
                            this.stopRecording();
                        }
                        else {
                            camera_plus_common_1.CLog('CameraPlus record video options:', options);
                            if (options) {
                                this._videoOptions = options;
                            }
                            else {
                                this._videoOptions = {
                                    confirm: this._owner.get().confirmVideo,
                                    saveToGallery: this._owner.get().saveToGallery
                                };
                            }
                            this._prepareVideoRecorder(this._videoOptions);
                        }
                        _a.label = 2;
                    case 2: return [3, 4];
                    case 3:
                        err_1 = _a.sent();
                        camera_plus_common_1.CLog(err_1);
                        this.sendEvent(CameraPlus.errorEvent, err_1, 'Error trying to record video.');
                        return [3, 4];
                    case 4: return [2];
                }
            });
        });
    };
    CameraPlus.prototype.stop = function () {
        if (this.enableVideo) {
            this.stopRecording();
        }
    };
    CameraPlus.prototype.stopRecording = function () {
        try {
            if (this.camera && this._mediaRecorder && this.isRecording) {
                camera_plus_common_1.CLog("*** stopping mediaRecorder ***");
                this._owner.get().sendEvent(CameraPlus.videoRecordingReadyEvent, this._videoPath);
                this._mediaRecorder.stop();
                this._releaseMediaRecorder();
                camera_plus_common_1.CLog("Recording complete");
                this.isRecording = false;
            }
        }
        catch (err) {
            camera_plus_common_1.CLog("stopRecording error", err);
            this.sendEvent(CameraPlus.errorEvent, err, 'Error trying to stop recording.');
            this._releaseMediaRecorder();
            this.isRecording = false;
        }
    };
    CameraPlus.prototype._prepareVideoRecorder = function (options) {
        var _this = this;
        if (!this._mediaRecorder) {
            this._mediaRecorder = new android.media.MediaRecorder();
            camera_plus_common_1.CLog("this._mediaRecorder", this._mediaRecorder);
        }
        this.camera.unlock();
        this._mediaRecorder.setCamera(this.camera);
        this._mediaRecorder.setAudioSource(android.media.MediaRecorder.AudioSource.CAMCORDER);
        this._mediaRecorder.setVideoSource(android.media.MediaRecorder.VideoSource.CAMERA);
        this._mediaRecorder.setProfile(android.media.CamcorderProfile.get(this.cameraId, android.media.CamcorderProfile.QUALITY_HIGH));
        var videoPath = this._getOutputMediaFile(2).toString();
        this._videoPath = videoPath;
        camera_plus_common_1.CLog("this._videoPath is " + this._videoPath);
        this._mediaRecorder.setOutputFile(videoPath);
        this._mediaRecorder.setPreviewDisplay(this._textureSurface);
        this._mediaRecorder.setOnErrorListener(new android.media.MediaRecorder.OnErrorListener({
            onError: function (mr, what, extra) {
                _this.sendEvent(CameraPlus.errorEvent, what, 'MediaRecorder error listener.');
                _this._releaseMediaRecorder();
            }
        }));
        try {
            this._mediaRecorder.prepare();
            this._mediaRecorder.start();
            this.isRecording = true;
            this._owner.get().sendEvent(CameraPlus.videoRecordingStartedEvent, this.camera);
        }
        catch (e) {
            camera_plus_common_1.CLog('Exception preparing MediaRecorder', e);
            this._releaseMediaRecorder();
            this.isRecording = false;
        }
    };
    CameraPlus.prototype._getOutputMediaFile = function (type) {
        var dateStamp = CamHelpers.createDateTimeStamp();
        var videoPath;
        var nativeFile;
        var fileName;
        if (this._videoOptions.saveToGallery === true) {
            var hasStoragePerm = this.hasStoragePermissions();
            if (!hasStoragePerm) {
                camera_plus_common_1.CLog("Application does not have storage permission to save file.");
                return null;
            }
            fileName = "VID_" + Date.now() + ".mp4";
            var folderPath = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DCIM).toString() +
                '/Camera/';
            if (!fs.Folder.exists(folderPath)) {
                fs.Folder.fromPath(folderPath);
            }
            videoPath = fs.path.join(folderPath, fileName);
            nativeFile = new java.io.File(videoPath);
        }
        else {
            fileName = "VID_" + Date.now() + ".mp4";
            var sdkVersionInt = parseInt(platform_1.device.sdkVersion);
            if (sdkVersionInt > 21) {
                var folderPath = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DCIM).toString() +
                    '/Camera/';
                if (!fs.Folder.exists(folderPath)) {
                    fs.Folder.fromPath(folderPath);
                }
                videoPath = fs.path.join(folderPath, fileName);
                nativeFile = new java.io.File(videoPath);
                var tempPictureUri = android.support.v4.content.FileProvider.getUriForFile(app.android.currentContext, app.android.nativeApp.getPackageName() + '.provider', nativeFile);
            }
            else {
                var folderPath = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DCIM).toString() +
                    '/Camera/';
                if (!fs.Folder.exists(folderPath)) {
                    fs.Folder.fromPath(folderPath);
                }
                videoPath = fs.path.join(folderPath, fileName);
                nativeFile = new java.io.File(videoPath);
            }
        }
        camera_plus_common_1.CLog("videoPath = " + videoPath);
        camera_plus_common_1.CLog("nativeFile = " + nativeFile);
        camera_plus_common_1.CLog("returning nativeFile = " + nativeFile);
        return nativeFile;
    };
    CameraPlus.prototype._releaseMediaRecorder = function () {
        if (this._mediaRecorder) {
            this._mediaRecorder.reset();
            this._mediaRecorder.release();
            this._mediaRecorder = null;
            this._videoPath = '';
            this.camera.lock();
        }
    };
    CameraPlus.prototype.chooseFromLibrary = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                var createThePickerIntent_1 = function () {
                    var intent = new android.content.Intent();
                    intent.setType('image/*');
                    intent.setAction('android.intent.action.GET_CONTENT');
                    if (_this.galleryPickerMode === 'multiple') {
                        intent.putExtra('android.intent.extra.ALLOW_MULTIPLE', true);
                    }
                    var onImagePickerResult = function (args) {
                        if (args.requestCode === RESULT_CODE_PICKER_IMAGES && args.resultCode === RESULT_OK) {
                            try {
                                var selectedImages = [];
                                var data = args.intent;
                                var clipData = data.getClipData();
                                if (clipData !== null) {
                                    for (var i = 0; i < clipData.getItemCount(); i++) {
                                        var clipItem = clipData.getItemAt(i);
                                        var uri = clipItem.getUri();
                                        var selectedAsset = new selected_asset_1.SelectedAsset(uri);
                                        var asset = new image_asset_1.ImageAsset(selectedAsset.android);
                                        selectedImages.push(asset);
                                    }
                                }
                                else {
                                    var uri = data.getData();
                                    var path = uri.getPath();
                                    var selectedAsset = new selected_asset_1.SelectedAsset(uri);
                                    var asset = new image_asset_1.ImageAsset(selectedAsset.android);
                                    selectedImages.push(asset);
                                }
                                app.android.off(app.AndroidApplication.activityResultEvent, onImagePickerResult);
                                resolve(selectedImages);
                                _this.sendEvent(CameraPlus.imagesSelectedEvent, selectedImages);
                                return;
                            }
                            catch (e) {
                                camera_plus_common_1.CLog(e);
                                app.android.off(app.AndroidApplication.activityResultEvent, onImagePickerResult);
                                reject(e);
                                _this.sendEvent(CameraPlus.errorEvent, e, 'Error with the image picker result.');
                                return;
                            }
                        }
                        else {
                            app.android.off(app.AndroidApplication.activityResultEvent, onImagePickerResult);
                            reject("Image picker activity result code " + args.resultCode);
                            return;
                        }
                    };
                    app.android.on(app.AndroidApplication.activityResultEvent, onImagePickerResult);
                    app.android.foregroundActivity.startActivityForResult(intent, RESULT_CODE_PICKER_IMAGES);
                };
                var hasPerm = _this.hasStoragePermissions();
                if (hasPerm === true) {
                    createThePickerIntent_1();
                }
                else {
                    permissions.requestPermissions([READ_EXTERNAL_STORAGE(), WRITE_EXTERNAL_STORAGE()]).then(function () {
                        createThePickerIntent_1();
                    });
                }
            }
            catch (e) {
                reject(e);
                _this.sendEvent(CameraPlus.errorEvent, e, 'Error choosing an image from the device library.');
            }
        });
    };
    CameraPlus.prototype.toggleFlash = function () {
        try {
            if (this.camera === undefined || this.camera === null) {
                camera_plus_common_1.CLog("There is no current camera to toggle flash mode");
                return;
            }
            var params = this.camera.getParameters();
            var currentFlashMode = params.getFlashMode();
            if (currentFlashMode === FLASH_MODE_OFF || currentFlashMode === null) {
                params.setFlashMode(FLASH_MODE_ON);
            }
            else if (currentFlashMode === FLASH_MODE_ON) {
                params.setFlashMode(FLASH_MODE_OFF);
            }
            camera_plus_common_1.CLog("setting flash mode params");
            this.camera.setParameters(params);
            this._ensureCorrectFlashIcon();
        }
        catch (error) {
            camera_plus_common_1.CLog('toggleFlash error', error);
            this.sendEvent(CameraPlus.errorEvent, error, 'Error trying to toggle flash.');
        }
    };
    CameraPlus.prototype.requestCameraPermissions = function (explanation) {
        var _this = this;
        if (explanation === void 0) { explanation = ''; }
        return new Promise(function (resolve, reject) {
            permissions
                .requestPermission(CAMERA(), explanation)
                .then(function () {
                    resolve(true);
                })
                .catch(function (err) {
                    _this.sendEvent(CameraPlus.errorEvent, err, 'Error requesting Camera permissions.');
                    reject(false);
                });
        });
    };
    CameraPlus.prototype.hasCameraPermission = function () {
        return permissions.hasPermission(CAMERA());
    };
    CameraPlus.prototype.requestAudioPermissions = function (explanation) {
        var _this = this;
        if (explanation === void 0) { explanation = ''; }
        return new Promise(function (resolve, reject) {
            permissions
                .requestPermission(RECORD_AUDIO(), explanation)
                .then(function () {
                    resolve(true);
                })
                .catch(function (err) {
                    _this.sendEvent(CameraPlus.errorEvent, err, 'Error requesting Audio permission.');
                    reject(false);
                });
        });
    };
    CameraPlus.prototype.hasAudioPermission = function () {
        return permissions.hasPermission(RECORD_AUDIO());
    };
    CameraPlus.prototype.requestStoragePermissions = function (explanation) {
        var _this = this;
        if (explanation === void 0) { explanation = ''; }
        return new Promise(function (resolve, reject) {
            permissions
                .requestPermissions([WRITE_EXTERNAL_STORAGE(), READ_EXTERNAL_STORAGE()], explanation)
                .then(function () {
                    resolve(true);
                })
                .catch(function (err) {
                    _this.sendEvent(CameraPlus.errorEvent, err, 'Error requesting Storage permissions.');
                    reject(false);
                });
        });
    };
    CameraPlus.prototype.hasStoragePermissions = function () {
        var writePerm = permissions.hasPermission(WRITE_EXTERNAL_STORAGE());
        var readPerm = permissions.hasPermission(READ_EXTERNAL_STORAGE());
        if (writePerm === true && readPerm === true) {
            return true;
        }
        else {
            return false;
        }
    };
    CameraPlus.prototype.requestVideoRecordingPermissions = function (explanation) {
        var _this = this;
        if (explanation === void 0) { explanation = ''; }
        return new Promise(function (resolve, reject) {
            return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    permissions
                        .requestPermissions([WRITE_EXTERNAL_STORAGE(), RECORD_AUDIO()], explanation)
                        .then(function () {
                            resolve(true);
                        })
                        .catch(function (err) {
                            _this.sendEvent(CameraPlus.errorEvent, err, 'Error requesting Video permissions.');
                            reject(false);
                        });
                    return [2];
                });
            });
        });
    };
    CameraPlus.prototype.hasVideoRecordingPermissions = function () {
        var writePerm = permissions.hasPermission(WRITE_EXTERNAL_STORAGE());
        var audio = permissions.hasPermission(RECORD_AUDIO());
        if (writePerm === true && audio === true) {
            return true;
        }
        else {
            return false;
        }
    };
    CameraPlus.prototype.getCurrentCamera = function () {
        if (this.cameraId === CAMERA_FACING_FRONT) {
            return 'front';
        }
        else {
            return 'rear';
        }
    };
    CameraPlus.prototype.isCameraAvailable = function () {
        if (utils.ad
            .getApplicationContext()
            .getPackageManager()
            .hasSystemFeature('android.hardware.camera')) {
            return true;
        }
        else {
            return false;
        }
    };
    CameraPlus.prototype.getNumberOfCameras = function () {
        return android.hardware.Camera.getNumberOfCameras();
    };
    CameraPlus.prototype.hasFlash = function () {
        if (this.camera === null || this.camera === undefined) {
            camera_plus_common_1.CLog("No camera");
            return false;
        }
        var params = this.camera.getParameters();
        var flashModes = params.getSupportedFlashModes();
        if (flashModes === null) {
            return false;
        }
        for (var i = flashModes.size(); i--;) {
            var item = flashModes.get(i);
            if (item === 'on' || item === 'auto') {
                return true;
            }
        }
        return false;
    };
    CameraPlus.prototype.getFlashMode = function () {
        if (this.camera === null || this.camera === undefined) {
            camera_plus_common_1.CLog('no camera');
            return null;
        }
        var params = this.camera.getParameters();
        var currentFlashMode = params.getFlashMode();
        return currentFlashMode;
    };
    CameraPlus.prototype._ensureCorrectFlashIcon = function () {
        if (this._flashBtn === undefined || this._flashBtn === null) {
            return;
        }
        this._flashBtn.setImageResource(android.R.color.transparent);
        var currentFlashMode = this.getFlashMode();
        var flashIcon = currentFlashMode === FLASH_MODE_OFF ? this.flashOffIcon : this.flashOnIcon;
        var imageDrawable = CamHelpers.getImageDrawable(flashIcon);
        this._flashBtn.setImageResource(imageDrawable);
    };
    CameraPlus.prototype._ensureFocusMode = function () {
        if (this.autoFocus === true && this.camera) {
            var params = this.camera.getParameters();
            var supportedFocusModes = params.getSupportedFocusModes();
            camera_plus_common_1.CLog("supported focus modes = " + supportedFocusModes + " --- " + DEVICE_INFO_STRING());
            if (supportedFocusModes.contains(android.hardware.Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {
                camera_plus_common_1.CLog("setting focus mode to FOCUS_MODE_CONTINUOUS_PICTURE");
                params.setFocusMode(android.hardware.Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
                this.camera.setParameters(params);
            }
            else if (supportedFocusModes.contains(android.hardware.Camera.Parameters.FOCUS_MODE_AUTO)) {
                camera_plus_common_1.CLog("setting focus mode to FOCUS_MODE_AUTO");
                params.setFocusMode(android.hardware.Camera.Parameters.FOCUS_MODE_AUTO);
                this.camera.setParameters(params);
            }
        }
        else if (this.camera) {
            var params = this.camera.getParameters();
            var supportedFocusModes = params.getSupportedFocusModes();
            camera_plus_common_1.CLog("supported focus modes = " + supportedFocusModes + " --- " + DEVICE_INFO_STRING());
            if (supportedFocusModes.contains(android.hardware.Camera.Parameters.FOCUS_MODE_FIXED)) {
                camera_plus_common_1.CLog("setting focus mode to FOCUS_MODE_FIXED");
                params.setFocusMode(android.hardware.Camera.Parameters.FOCUS_MODE_FIXED);
                this.camera.setParameters(params);
            }
        }
    };
    CameraPlus.prototype._initFlashButton = function () {
        var _this = this;
        this._flashBtn = CamHelpers.createImageButton();
        this._ensureCorrectFlashIcon();
        var shape = CamHelpers.createTransparentCircleDrawable();
        this._flashBtn.setBackgroundDrawable(shape);
        this._flashBtn.setOnClickListener(new android.view.View.OnClickListener({
            onClick: function (args) {
                _this.toggleFlash();
                _this._ensureCorrectFlashIcon();
            }
        }));
        var flashParams = new android.widget.RelativeLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
        if (this.insetButtons === true) {
            var layoutWidth = this._nativeView.getWidth();
            camera_plus_common_1.CLog("layoutWidth = " + layoutWidth);
            var xMargin = layoutWidth * this.insetButtonsPercent;
            var layoutHeight = this._nativeView.getHeight();
            camera_plus_common_1.CLog("layoutHeight = " + layoutHeight);
            var yMargin = layoutHeight * this.insetButtonsPercent;
            flashParams.setMargins(xMargin, yMargin, 8, 8);
        }
        else {
            flashParams.setMargins(8, 8, 8, 8);
        }
        flashParams.addRule(ALIGN_PARENT_TOP);
        flashParams.addRule(ALIGN_PARENT_LEFT);
        this._nativeView.addView(this._flashBtn, flashParams);
    };
    CameraPlus.prototype._initGalleryButton = function () {
        var _this = this;
        this._galleryBtn = CamHelpers.createImageButton();
        var openGalleryDrawable = CamHelpers.getImageDrawable(this.galleryIcon);
        this._galleryBtn.setImageResource(openGalleryDrawable);
        var shape = CamHelpers.createTransparentCircleDrawable();
        this._galleryBtn.setBackgroundDrawable(shape);
        this._galleryBtn.setOnClickListener(new android.view.View.OnClickListener({
            onClick: function (args) {
                _this.chooseFromLibrary();
            }
        }));
        var galleryParams = new android.widget.RelativeLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
        if (this.insetButtons === true) {
            var layoutWidth = this._nativeView.getWidth();
            camera_plus_common_1.CLog("layoutWidth = " + layoutWidth);
            var xMargin = layoutWidth * this.insetButtonsPercent;
            var layoutHeight = this._nativeView.getHeight();
            camera_plus_common_1.CLog("layoutHeight = " + layoutHeight);
            var yMargin = layoutHeight * this.insetButtonsPercent;
            galleryParams.setMargins(xMargin, 8, 8, yMargin);
        }
        else {
            galleryParams.setMargins(8, 8, 8, 8);
        }
        galleryParams.addRule(ALIGN_PARENT_BOTTOM);
        galleryParams.addRule(ALIGN_PARENT_LEFT);
        this._nativeView.addView(this._galleryBtn, galleryParams);
    };
    CameraPlus.prototype._initToggleCameraButton = function () {
        var _this = this;
        this._toggleCamBtn = CamHelpers.createImageButton();
        var switchCameraDrawable = CamHelpers.getImageDrawable(this.toggleCameraIcon);
        this._toggleCamBtn.setImageResource(switchCameraDrawable);
        var shape = CamHelpers.createTransparentCircleDrawable();
        this._toggleCamBtn.setBackgroundDrawable(shape);
        this._toggleCamBtn.setOnClickListener(new android.view.View.OnClickListener({
            onClick: function (view) {
                _this.toggleCamera0();
            }
        }));
        var toggleCamParams = new android.widget.RelativeLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
        if (this.insetButtons === true) {
            var layoutWidth = this._nativeView.getWidth();
            camera_plus_common_1.CLog("layoutWidth = " + layoutWidth);
            var xMargin = layoutWidth * this.insetButtonsPercent;
            var layoutHeight = this._nativeView.getHeight();
            camera_plus_common_1.CLog("layoutHeight = " + layoutHeight);
            var yMargin = layoutHeight * this.insetButtonsPercent;
            toggleCamParams.setMargins(8, yMargin, xMargin, 8);
        }
        else {
            toggleCamParams.setMargins(8, 8, 8, 8);
        }
        toggleCamParams.addRule(ALIGN_PARENT_TOP);
        toggleCamParams.addRule(ALIGN_PARENT_RIGHT);
        this._nativeView.addView(this._toggleCamBtn, toggleCamParams);
    };
    CameraPlus.prototype._initTakePicButton = function () {
        var _this = this;
        this._takePicBtn = CamHelpers.createImageButton();
        var takePicDrawable = CamHelpers.getImageDrawable(this.takePicIcon);
        this._takePicBtn.setImageResource(takePicDrawable);
        var shape = CamHelpers.createTransparentCircleDrawable();
        this._takePicBtn.setBackgroundDrawable(shape);
        this._takePicBtn.setOnClickListener(new android.view.View.OnClickListener({
            onClick: function (args) {
                camera_plus_common_1.CLog("The default Take Picture event will attempt to save the image to gallery.");
                var opts = {
                    saveToGallery: true,
                    confirm: _this.confirmPhotos ? true : false,
                    autoSquareCrop: _this.autoSquareCrop
                };
                _this.takePicture(opts);
            }
        }));
        var takePicParams = new android.widget.RelativeLayout.LayoutParams(WRAP_CONTENT, WRAP_CONTENT);
        if (this.insetButtons === true) {
            var layoutHeight = this._nativeView.getHeight();
            camera_plus_common_1.CLog("layoutHeight = " + layoutHeight);
            var yMargin = layoutHeight * this.insetButtonsPercent;
            takePicParams.setMargins(8, 8, 8, yMargin);
        }
        else {
            takePicParams.setMargins(8, 8, 8, 8);
        }
        takePicParams.addRule(ALIGN_PARENT_BOTTOM);
        takePicParams.addRule(CENTER_HORIZONTAL);
        this._nativeView.addView(this._takePicBtn, takePicParams);
    };
    CameraPlus.prototype._initDefaultButtons = function () {
        try {
            if (this.showFlashIcon === true && this.getFlashMode() !== null && this._flashBtn === null
            ) {
                // this._nativeView.removeView(this._flashBtn);
                this._initFlashButton();
            }
            // else if(this._flashBtn !== null) {
            //     this._nativeView.removeView(this._flashBtn);
            //     this._initFlashButton();
            // }
            if (this.showGalleryIcon === true && this._galleryBtn === null) {
                this._initGalleryButton();
            }
            if (this.showToggleIcon === true && this.getNumberOfCameras() > 1
                && this._toggleCamBtn === null
            ) {
                this._initToggleCameraButton();
            }
            if (this.showCaptureIcon === true && this._takePicBtn === null) {
                if (this.showFlashIcon === true && this.getFlashMode() !== null && this._flashBtn === null) {
                    this._initFlashButton();
                }
                if (this.showGalleryIcon === true && this._galleryBtn === null) {
                    this._initGalleryButton();
                }
                if (this.showToggleIcon === true && this.getNumberOfCameras() > 1 && this._toggleCamBtn === null) {
                    this._initToggleCameraButton();
                }
                if (this.showCaptureIcon === true && this._takePicBtn === null) {
                    this._initTakePicButton();
                }
            }
        }
        catch (ex) {
            camera_plus_common_1.CLog('_initDefaultButtons error', ex);
        }
    };
    CameraPlus.prototype._initCamera0 = function (context, id) {
        try {
            camera_plus_common_1.CLog("*** _initCamera0 ***\nthis.cameraId = " + this.cameraId + " --- " + DEVICE_INFO_STRING());
            // this.cameraViewParent = null;
            if (this.camera === null) {
                this.cameraId = CAMERA_FACING_BACK;
            }
            if (id === null || id === undefined) {
                camera_plus_common_1.CLog("opening new camera");
            } else {
                camera_plus_common_1.CLog("opening camera with id = " + id);
                var javaCameraView = org.opencv.android.JavaCameraView.extend({
                    _this5: this,
                    init: function () {
                        camera_plus_common_1.CLog("JavaCameraView initialized...");
                    },
                    connectCamera: function (width, height) {
                        camera_plus_common_1.CLog("connectCamera called..");
                        var connected = this.super.connectCamera(width, height);
                        if (connected) {
                            this._this5.camera = this.super.mCamera;
                            this._this5.sendEvent('loaded', this._this5.camera);
                            // this._this5._initDefaultButtons();
                            this._this5._ensureFocusMode();
                            var _thisConnectCamera = this._this5;
                            setTimeout(function () {
                                camera_plus_common_1.CLog("sliderpoistion event called...");
                                // _thisConnectCamera.sendEvent('loaded');
                                _thisConnectCamera.sendEvent('sliderpoistion');
                            }, 500);
                            // this._this5.camera.setPreviewTexture(this._this5._surface);
                            // this._this5._ensureCorrectFlashIcon();

                            // this._this5._setCameraDisplayOrientation0(this._this5.cameraId, this._this5.camera, this.super);
                            // this._this5._setCameraDisplayOrientation1(app.android.foregroundActivity, this._this5.cameraId, this._this5.camera, this.super);
                            // this._this5._setCameraDisplayOrientation(app.android.foregroundActivity, this._this5.cameraId, this._this5.camera);

                        }
                        return connected;
                    },
                    disconnectCamera: function () {
                        camera_plus_common_1.CLog("disconnectCamera called");
                        this.super.disconnectCamera();
                        this._this5.camera = null;

                        // this._this5._flashBtn = null;
                        // this._this5._toggleCamBtn = null;
                        // this._this5.disposeNativeView();
                        this._this5._flashBtn = null;
                        this._this5._takePicBtn = null;
                        this._this5._toggleCamBtn = null;
                        this._this5._galleryBtn = null;
                    },
                    onPreviewFrame: function (data, camera) {
                        // var  mat = new org.opencv.core.Mat(480, 720, org.opencv.core.CvType.CV_8UC1);
                        // mat.put(0, 0, data);

                        // org.opencv.core.Core.transpose(mat, mat);
                        // org.opencv.core.Core.flip(mat, mat, -1);
                        this.super.onPreviewFrame(data, camera);
                        // var canvas = this.super.getHolder().lockCanvas();
                        //  canvas.rotate(90,canvas.getWidth()/2, canvas.getHeight()/2);
                        //  this.super.getHolder().unlockCanvasAndPost(canvas);
                        if (this._this5._takePicBtn != null) {
                            this._this5._takePicBtn.setEnabled(true);
                            this._this5._takePicBtn.clearColorFilter();
                            if (this.sortedRecPointsList.size() == 0 && this.isContourRequired) {
                                this._this5._takePicBtn.setColorFilter(this._this5.grayColor);
                                this._this5._takePicBtn.setEnabled(false);
                            }
                        }
                    },
                    layout: function (l, t, r, b) {
                        var _thisLayout = this;
                        setTimeout(function () {
                            camera_plus_common_1.CLog("layout called");
                            _thisLayout.super.layout(l, t, r, b);
                        }, 100);

                        // if(this._this5.camera != null) {
                        // this._this5._setCameraDisplayOrientation0(this._this5.cameraId, this._this5.camera, this.super);
                        // }
                        //  setTimeout(function () {
                        //         camera_plus_common_1.CLog("sliderpoistion event called..");
                        //         _thisLayout._this5.sendEvent('loaded');
                        //         _thisLayout._this5.sendEvent('sliderpoistion');
                        //     }, 500);
                        // this._this5.sendEvent('sliderpoistion');
                        // if(this._this5.camera != null) {
                        //     this._this5._setCameraDisplayOrientation(app.android.foregroundActivity, this._this5.cameraId, this._this5.camera);
                        // }
                        // this._this5.cameraViewParent = this.super;
                        // this._this5._initDefaultButtons();
                    },
                    onMeasure: function (widthMeasureSpec, heightMeasureSpec) {
                        camera_plus_common_1.CLog("onMeasure called");
                        this.super.onMeasure(widthMeasureSpec, heightMeasureSpec);
                        // this._this5._setCameraDisplayOrientation0(this._this5.cameraId, this._this5.camera, this.super);
                        // if(this._this5.camera != null) {
                        //     this._this5._setCameraDisplayOrientation(app.android.foregroundActivity, this._this5.cameraId, this._this5.camera);
                        // } 
                        // this._this5.cameraViewParent = this.super;
                        // this._this5._initDefaultButtons();
                    }
                });
                if (this.ocvCameraView !== null) {
                    this._nativeView.removeView(this.ocvCameraView);
                }
                this.ocvCameraView = new javaCameraView(context, id);
                // this.ocvCameraView.setVisibility(android.view.SurfaceView.VISIBLE);

                // this.ocvCameraView.setCvCameraViewListener(new org.opencv.android.CameraBridgeViewBase.CvCameraViewListener2( {

                //     onCameraViewStarted: function(width, height){
                //         this.super.onCameraViewStarted(width, height);
                //     },
                //     onCameraViewStopped: function() {
                //         this.super.onCameraViewStopped();
                //     },
                //     onCameraFrame: function(inputFrame) {
                //         return this.super.onCameraFrame(inputFrame);
                //     }
                // }));


                this._nativeView.addView(this.ocvCameraView);
                this.ocvCameraView.enableView();
            }
            // this.sendEvent('loaded', this.camera);
            if (id !== null && id !== undefined) {
                this.cameraId = id;
            }
            else {
                if (this.cameraId === CAMERA_FACING_BACK) {
                    this.cameraId = CAMERA_FACING_BACK;
                }
                else {
                    this.cameraId = CAMERA_FACING_FRONT;
                }
            }
            // this.sendEvent('loaded', this.camera);
            // // this._initDefaultButtons();
            // this._ensureFocusMode();
            // this._ensureCorrectFlashIcon();
        }
        catch (ex) {
            camera_plus_common_1.CLog('error _initCamera0', ex);
        }
    };
    CameraPlus.prototype._initCamera = function (id) {
        try {
            camera_plus_common_1.CLog("*** _initCamera ***\nthis.cameraId = " + this.cameraId + " --- " + DEVICE_INFO_STRING());
            if (this.camera === null) {
                this.cameraId = CAMERA_FACING_BACK;
            }
            if (id === null || id === undefined) {
                camera_plus_common_1.CLog("opening new camera");
                this.camera = android.hardware.Camera.open();
            }
            else {
                camera_plus_common_1.CLog("opening camera with id = " + id);
                this.camera = android.hardware.Camera.open(id);
            }
            this.sendEvent('loaded', this.camera);
            if (id !== null && id !== undefined) {
                this.cameraId = id;
            }
            else {
                if (this.cameraId === CAMERA_FACING_BACK) {
                    this.cameraId = CAMERA_FACING_BACK;
                }
                else {
                    this.cameraId = CAMERA_FACING_FRONT;
                }
            }
            this._ensureFocusMode();
            this._setCameraDisplayOrientation(app.android.foregroundActivity, this.cameraId, this.camera);
            this.camera.setPreviewTexture(this._surface);
            this.camera.startPreview();
            this._ensureCorrectFlashIcon();
        }
        catch (ex) {
            camera_plus_common_1.CLog('error _initCamera', ex);
        }
    };
    CameraPlus.prototype._setCameraDisplayOrientation0 = function (cameraId, camera, parent) {
        camera_plus_common_1.CLog("*** _setCameraDisplayOrientation0 ***");
        var rotation = app.android.foregroundActivity
            .getWindowManager()
            .getDefaultDisplay()
            .getRotation();

        var viewWidth = parent.getWidth() / 2.0;
        var viewHeight = parent.getHeight() / 2.0;
        var isFrontCamera = android.hardware.Camera.CameraInfo.CAMERA_FACING_FRONT == cameraId;
        parent.mMatrix.reset();
        if (isFrontCamera) {
            parent.mMatrix.preScale(-1, 1, viewWidth, viewHeight);
        }
        parent.mMatrix.preTranslate(viewWidth, viewHeight);
        if (isFrontCamera) {
            parent.mMatrix.preRotate(270);
        } else {
            parent.degrees = 0;
            parent.mMatrix.preRotate(90);
        }
        if (rotation == 1) {
            parent.mMatrix.preRotate(270);
        }
        parent.mMatrix.preTranslate(-viewWidth, -viewHeight);
        // this._this5._ensureFocusMode();
        // this._ensureCorrectFlashIcon();
    };
    CameraPlus.prototype._setCameraDisplayOrientation1 = function (activity, cameraId, camera, parent) {
        camera_plus_common_1.CLog("*** _setCameraDisplayOrientation *** ");
        var info = new android.hardware.Camera.CameraInfo();
        android.hardware.Camera.getCameraInfo(cameraId, info);
        var params = this.camera.getParameters();
        var rotation = activity
            .getWindowManager()
            .getDefaultDisplay()
            .getRotation();
        camera_plus_common_1.CLog("DISPLAY ROTATION = " + rotation);
        var degrees = 0;
        switch (rotation) {
            case 0:
                degrees = 0;
                break;
            case 1:
                degrees = 90;
                break;
            case 2:
                degrees = 180;
                break;
            case 3:
                degrees = 270;
                break;
        }
        var result;
        if (info.facing === CAMERA_FACING_FRONT) {
            camera_plus_common_1.CLog("--- setting rotation for front facing camera --- \n --- info.orientation = " + info.orientation);
            result = (info.orientation + degrees) % 360;
            result = (360 - result) % 360;
            camera_plus_common_1.CLog("result = " + result);
            var deviceModel = platform_1.device.model.toLowerCase();
            var isNexus6 = deviceModel.indexOf('nexus') > -1 && deviceModel.indexOf('6') > -1;
            if (this.cameraId === CAMERA_FACING_FRONT && isNexus6) {
                params.setRotation(90);
            }
            else {
                params.setRotation(270);
            }
        }
        else {
            camera_plus_common_1.CLog("--- setting rotation for back facing camera --- \n --- info.orientation = " + info.orientation);
            result = (info.orientation - degrees + 360) % 360;
            camera_plus_common_1.CLog("result = " + result);
            params.setRotation(result);
        }
        var mSupportedPreviewSizes = params.getSupportedPreviewSizes();
        var layoutWidth = this._nativeView.getWidth();
        var layoutHeight = this._nativeView.getHeight();
        var mPreviewSize = CamHelpers.getOptimalPreviewSize(mSupportedPreviewSizes, layoutWidth, layoutHeight);
        camera_plus_common_1.CLog("mPreviewSize = " + mPreviewSize);
        if (mPreviewSize) {
            if (this.enableVideo) {
                var width = 1920;
                var height = 1080;
                if (mSupportedPreviewSizes) {
                    var size = mSupportedPreviewSizes.get(0);
                    if (size) {
                        width = size.width;
                        height = size.height;
                    }
                }
                camera_plus_common_1.CLog("setPreviewSize: " + width + "x" + height);
                params.setPreviewSize(width, height);
            }
            else {
                params.setPreviewSize(mPreviewSize.width, mPreviewSize.height);
            }
        }
        this.camera.setParameters(params);
        camera.setDisplayOrientation(result);
        parent.degrees = result; // for frame image rotation in backend
        // var viewWidth = parent.getWidth() / 2.0;
        // var viewHeight = parent.getHeight() / 2.0;
        // var isFrontCamera = android.hardware.Camera.CameraInfo.CAMERA_FACING_FRONT == cameraId;
        // parent.mMatrix.reset();
        // if (isFrontCamera) {
        //     parent.mMatrix.preScale(-1, 1, viewWidth, viewHeight);
        // }
        // parent.mMatrix.preTranslate(viewWidth, viewHeight);
        // if (isFrontCamera) {
        //     parent.mMatrix.preRotate(270);
        // } else {
        //     parent.mMatrix.preRotate(result);
        // }
        // if (rotation == 1) {
        //     // parent.mMatrix.preRotate(270);
        // }
        // parent.mMatrix.preTranslate(-viewWidth, -viewHeight);
    };
    CameraPlus.prototype._setCameraDisplayOrientation = function (activity, cameraId, camera) {
        camera_plus_common_1.CLog("*** _setCameraDisplayOrientation ***");
        var info = new android.hardware.Camera.CameraInfo();
        android.hardware.Camera.getCameraInfo(cameraId, info);
        var params = this.camera.getParameters();
        var rotation = activity
            .getWindowManager()
            .getDefaultDisplay()
            .getRotation();
        camera_plus_common_1.CLog("DISPLAY ROTATION = " + rotation);
        var degrees = 0;
        switch (rotation) {
            case 0:
                degrees = 0;
                break;
            case 1:
                degrees = 90;
                break;
            case 2:
                degrees = 180;
                break;
            case 3:
                degrees = 270;
                break;
        }
        var result;
        if (info.facing === CAMERA_FACING_FRONT) {
            camera_plus_common_1.CLog("--- setting rotation for front facing camera --- \n --- info.orientation = " + info.orientation);
            result = (info.orientation + degrees) % 360;
            result = (360 - result) % 360;
            camera_plus_common_1.CLog("result = " + result);
            var deviceModel = platform_1.device.model.toLowerCase();
            var isNexus6 = deviceModel.indexOf('nexus') > -1 && deviceModel.indexOf('6') > -1;
            if (this.cameraId === CAMERA_FACING_FRONT && isNexus6) {
                params.setRotation(90);
            }
            else {
                params.setRotation(270);
            }
        }
        else {
            camera_plus_common_1.CLog("--- setting rotation for back facing camera --- \n --- info.orientation = " + info.orientation);
            result = (info.orientation - degrees + 360) % 360;
            camera_plus_common_1.CLog("result = " + result);
            params.setRotation(result);
        }
        var mSupportedPreviewSizes = params.getSupportedPreviewSizes();
        var layoutWidth = this._nativeView.getWidth();
        var layoutHeight = this._nativeView.getHeight();
        var mPreviewSize = CamHelpers.getOptimalPreviewSize(mSupportedPreviewSizes, layoutWidth, layoutHeight);
        camera_plus_common_1.CLog("mPreviewSize = " + mPreviewSize);
        if (mPreviewSize) {
            if (this.enableVideo) {
                var width = 1920;
                var height = 1080;
                if (mSupportedPreviewSizes) {
                    var size = mSupportedPreviewSizes.get(0);
                    if (size) {
                        width = size.width;
                        height = size.height;
                    }
                }
                camera_plus_common_1.CLog("setPreviewSize: " + width + "x" + height);
                params.setPreviewSize(width, height);
            }
            else {
                params.setPreviewSize(mPreviewSize.width, mPreviewSize.height);
            }
        }
        this.camera.setParameters(params);
        camera.setDisplayOrientation(result);
    };
    CameraPlus.prototype._releaseCameraAndPreview0 = function () {
        try {
            if (this._textureSurface !== null) {
                this._textureSurface.release();
                this._textureSurface = null;
            }
            // if (this.camera) {
            //     this.camera.stopPreview();
            //     this.camera.setPreviewCallback(null);
            //     this.camera.release();
            //     this.camera = null;
            // }
            if (this._mediaRecorder) {
                this._mediaRecorder.reset();
                this._mediaRecorder.release();
                this._mediaRecorder = null;
            }
        }
        catch (ex) {
            camera_plus_common_1.CLog('error _releaseCameraAndPreview0', ex);
        }
    };
    CameraPlus.prototype._releaseCameraAndPreview = function () {
        try {
            if (this._textureSurface !== null) {
                this._textureSurface.release();
                this._textureSurface = null;
            }
            if (this.camera) {
                this.camera.stopPreview();
                this.camera.setPreviewCallback(null);
                this.camera.release();
                this.camera = null;
            }
            if (this._mediaRecorder) {
                this._mediaRecorder.reset();
                this._mediaRecorder.release();
                this._mediaRecorder = null;
            }
        }
        catch (ex) {
            camera_plus_common_1.CLog('error _releaseCameraAndPreview', ex);
        }
    };
    CameraPlus.prototype._onPictureTaken0 = function (options, data) {
        var _this = this;
        this._releaseCameraAndPreview0();
        // this._initCamera0(this._context, this.cameraId);
        if (this.hasStoragePermissions() === true) {
            this._finishSavingAndConfirmingPicture(options, data);
        }
        else {
            camera_plus_common_1.CLog("Application does not have permission to WRITE_EXTERNAL_STORAGE to save image.");
            var result = this.requestStoragePermissions()
                .then(function (result) {
                    _this._finishSavingAndConfirmingPicture(options, data);
                })
                .catch(function (ex) {
                    camera_plus_common_1.CLog('Error requesting storage permissions', ex);
                });
        }
    };
    CameraPlus.prototype._onPictureTaken = function (options, data) {
        var _this = this;
        this._releaseCameraAndPreview();
        this._initCamera0(this._context, this.cameraId);
        if (this.hasStoragePermissions() === true) {
            this._finishSavingAndConfirmingPicture(options, data);
        }
        else {
            camera_plus_common_1.CLog("Application does not have permission to WRITE_EXTERNAL_STORAGE to save image.");
            var result = this.requestStoragePermissions()
                .then(function (result) {
                    _this._finishSavingAndConfirmingPicture(options, data);
                })
                .catch(function (ex) {
                    camera_plus_common_1.CLog('Error requesting storage permissions', ex);
                });
        }
    };
    CameraPlus.prototype._finishSavingAndConfirmingPicture = function (options, data) {
        return __awaiter(this, void 0, void 0, function () {
            var confirmPic, confirmPicRetakeText, confirmPicSaveText, saveToGallery, reqWidth, reqHeight, shouldKeepAspectRatio, shouldAutoSquareCrop, density, dateStamp, picturePath, nativeFile, orientation, bitmapMatrix, bitmapOptions, originalBmp, width, height, finalBmp, offsetWidth, offsetHeight, outputStream, fileName, folderPath, folderPath, result, asset, asset_1, asset;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        shouldAutoSquareCrop = this.autoSquareCrop;
                        density = utils.layout.getDisplayDensity();
                        if (options) {
                            confirmPic = options.confirm ? true : false;
                            confirmPicRetakeText = options.confirmRetakeText ? options.confirmRetakeText : this.confirmRetakeText;
                            confirmPicSaveText = options.confirmSaveText ? options.confirmSaveText : this.confirmSaveText;
                            saveToGallery = options.saveToGallery ? true : false;
                            reqWidth = options.width ? options.width * density : 0;
                            reqHeight = options.height ? options.height * density : reqWidth;
                            shouldKeepAspectRatio = types.isNullOrUndefined(options.keepAspectRatio) ? true : options.keepAspectRatio;
                            shouldAutoSquareCrop = !!options.autoSquareCrop;
                        }
                        else {
                            camera_plus_common_1.CLog('Using property getters for defaults, no options...');
                            confirmPic = this.confirmPhotos;
                            saveToGallery = this.saveToGallery;
                        }
                        dateStamp = CamHelpers.createDateTimeStamp();
                        orientation = CamHelpers.getOrientationFromBytes(data);
                        bitmapMatrix = new android.graphics.Matrix();
                        switch (orientation) {
                            case 1:
                                break;
                            case 2:
                                bitmapMatrix.postScale(-1, 1);
                                break;
                            case 3:
                                bitmapMatrix.postRotate(180);
                                break;
                            case 4:
                                bitmapMatrix.postRotate(180);
                                bitmapMatrix.postScale(-1, 1);
                                break;
                            case 5:
                                bitmapMatrix.postRotate(90);
                                bitmapMatrix.postScale(-1, 1);
                                break;
                            case 6:
                                bitmapMatrix.postRotate(90);
                                break;
                            case 7:
                                bitmapMatrix.postRotate(270);
                                bitmapMatrix.postScale(-1, 1);
                                break;
                            case 8:
                                bitmapMatrix.postRotate(270);
                                break;
                        }
                        if (shouldAutoSquareCrop || orientation > 1) {
                            bitmapOptions = new android.graphics.BitmapFactory.Options();
                            bitmapOptions.inJustDecodeBounds = true;
                            originalBmp = android.graphics.BitmapFactory.decodeByteArray(data, 0, data.length, bitmapOptions);
                            camera_plus_common_1.CLog('originalBmp', originalBmp);
                            bitmapOptions.inSampleSize = CamHelpers.calculateInSampleSize(bitmapOptions, 1000, 1000);
                            camera_plus_common_1.CLog('bitmapOptions.inSampleSize', bitmapOptions.inSampleSize);
                            bitmapOptions.inJustDecodeBounds = false;
                            originalBmp = android.graphics.BitmapFactory.decodeByteArray(data, 0, data.length, bitmapOptions);
                            camera_plus_common_1.CLog('originalBmp', originalBmp);
                            width = originalBmp.getWidth();
                            height = originalBmp.getHeight();
                            finalBmp = void 0;
                            if (shouldAutoSquareCrop) {
                                offsetWidth = 0;
                                offsetHeight = 0;
                                if (width < height) {
                                    offsetHeight = (height - width) / 2;
                                    height = width;
                                }
                                else {
                                    offsetWidth = (width - height) / 2;
                                    width = height;
                                }
                                finalBmp = android.graphics.Bitmap.createBitmap(originalBmp, offsetWidth, offsetHeight, width, height, bitmapMatrix, false);
                                camera_plus_common_1.CLog('finalBmp', finalBmp);
                            }
                            else {
                                finalBmp = android.graphics.Bitmap.createBitmap(originalBmp, 0, 0, width, height, bitmapMatrix, false);
                                camera_plus_common_1.CLog('finalBmp', finalBmp);
                            }
                            camera_plus_common_1.CLog('recycling originalBmp...');
                            originalBmp.recycle();
                            outputStream = new java.io.ByteArrayOutputStream();
                            camera_plus_common_1.CLog('compressing finalBmp...');
                            finalBmp.compress(android.graphics.Bitmap.CompressFormat.JPEG, 100, outputStream);
                            camera_plus_common_1.CLog('recycling finalBmp...');
                            finalBmp.recycle();
                            data = outputStream.toByteArray();
                            camera_plus_common_1.CLog('byteArray data', data);
                            try {
                                camera_plus_common_1.CLog('closing outputStream...');
                                outputStream.close();
                            }
                            catch (ex) {
                                camera_plus_common_1.CLog('byteArrayOuputStream.close() error', ex);
                                this.sendEvent(CameraPlus.errorEvent, ex, 'Error closing ByteArrayOutputStream.');
                            }
                        }
                        fileName = "IMG_" + Date.now() + ".jpg";
                        if (saveToGallery === true) {
                            folderPath = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DCIM).toString() +
                                '/Camera/';
                            if (!fs.Folder.exists(folderPath)) {
                                fs.Folder.fromPath(folderPath);
                            }
                            picturePath = fs.path.join(folderPath, fileName);
                            nativeFile = new java.io.File(picturePath);
                        }
                        else {
                            folderPath = utils.ad
                                .getApplicationContext()
                                .getExternalFilesDir(null)
                                .getAbsolutePath();
                            if (!fs.Folder.exists(folderPath)) {
                                fs.Folder.fromPath(folderPath);
                            }
                            picturePath = fs.path.join(folderPath, fileName);
                            nativeFile = new java.io.File(picturePath);
                        }
                        camera_plus_common_1.CLog('picturePath', picturePath);
                        camera_plus_common_1.CLog('nativeFile', nativeFile);
                        if (!(saveToGallery === true && confirmPic === true)) return [3, 2];
                        return [4, CamHelpers.createImageConfirmationDialog(data, confirmPicRetakeText, confirmPicSaveText).catch(function (ex) {
                            camera_plus_common_1.CLog('Error createImageConfirmationDialog', ex);
                        })];
                    case 1:
                        result = _a.sent();
                        camera_plus_common_1.CLog("confirmation result = " + result);
                        if (result !== true) {
                            return [2];
                        }
                        this._savePicture(nativeFile, data);
                        asset = CamHelpers.assetFromPath(picturePath, reqWidth, reqHeight, shouldKeepAspectRatio);
                        this.sendEvent(CameraPlus.photoCapturedEvent, asset);
                        return [2];
                    case 2:
                        if (saveToGallery === true && !confirmPic) {
                            this._savePicture(nativeFile, data);
                            asset_1 = CamHelpers.assetFromPath(picturePath, reqWidth, reqHeight, shouldKeepAspectRatio);
                            this.sendEvent(CameraPlus.photoCapturedEvent, asset_1);
                            return [2];
                        }
                        asset = CamHelpers.assetFromPath(picturePath, reqWidth, reqHeight, shouldKeepAspectRatio);
                        this.sendEvent(CameraPlus.photoCapturedEvent, asset);
                        return [2];
                }
            });
        });
    };
    CameraPlus.prototype._savePicture = function (file, data) {
        try {
            this._saveImageToDisk0(file, data);
            this._addPicToGallery(file);
        }
        catch (ex) {
            camera_plus_common_1.CLog('_savePicture error', ex);
        }
    };
    // CameraPlus.prototype._savePicture0 = function (file, data) {
    //     try {
    //         this._saveImageToDisk0(file, data);
    //         this._addPicToGallery(file);
    //     }
    //     catch (ex) {
    //         camera_plus_common_1.CLog('_savePicture error', ex);
    //     }
    // };
    CameraPlus.prototype._saveImageToDisk = function (picFile, data) {
        var fos = null;
        try {
            fos = new java.io.FileOutputStream(picFile);
            camera_plus_common_1.CLog('fileOutputStream', fos);
            fos.write(data);
            camera_plus_common_1.CLog('closing fileOutputStream...');
            fos.close();
        }
        catch (ex) {
            camera_plus_common_1.CLog("error with fileOutputStream = " + ex);
            this.sendEvent(CameraPlus.errorEvent, ex, 'Error saving the image to disk.');
        }
    };
    CameraPlus.prototype._saveImageToDisk0 = function (picFile, data) {
        var fos = null;
        var bitmap = android.graphics.BitmapFactory.decodeByteArray(data, 0, data.length);
        var rotation = app.android.foregroundActivity
            .getWindowManager()
            .getDefaultDisplay()
            .getRotation();
        var bm = null;
        if (rotation == 0) {
            var matrix = new android.graphics.Matrix();
            matrix.postRotate(90);
            bm = android.graphics.Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);
        } else {
            bm = bitmap;
        }
        try {
            // var fileNameTemp = "IMG_TEMP" + Date.now() + ".jpg";
            //              var   folderPathTemp = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DCIM).toString() +
            //                     '/Camera/';
            //                 if (!fs.Folder.exists(folderPathTemp)) {
            //                     fs.Folder.fromPath(folderPathTemp);
            //                 }
            // var picturePathTemp = fs.path.join(folderPathTemp, fileNameTemp);
            fos = new java.io.FileOutputStream(picFile);
            camera_plus_common_1.CLog('fileOutputStream0', fos);
            bm.compress(android.graphics.Bitmap.CompressFormat.JPEG, 90, fos);
            // fos.write(data);
            camera_plus_common_1.CLog('closing fileOutputStream0...');
            fos.close();
        }
        catch (ex) {
            camera_plus_common_1.CLog("error with fileOutputStream = " + ex);
            this.sendEvent(CameraPlus.errorEvent, ex, 'Error saving the image to disk.');
        }

        // var matrix = new android.graphics.Matrix();
        // var rotation = app.android.foregroundActivity
        //     .getWindowManager()
        //     .getDefaultDisplay()
        //     .getRotation();
        // if(rotation == 1) {
        //     matrix.postRotate(270);
        // } else {
        //     matrix.postRotate(90);
        // }
        // var bmOut = android.graphics.Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);

        // try {
        //     fos = new java.io.FileOutputStream(picFile);
        //     camera_plus_common_1.CLog('fileOutputStream0', fos);
        //      bmOut.compress(android.graphics.Bitmap.CompressFormat.JPEG, 80, fos);
        //     // fos.write(data);
        //     camera_plus_common_1.CLog('closing fileOutputStream0...');
        //     fos.close();
        // }
        // catch (ex) {
        //     camera_plus_common_1.CLog("error with fileOutputStream = " + ex);
        //     this.sendEvent(CameraPlus.errorEvent, ex, 'Error saving the image to disk.');
        // }
    };
    CameraPlus.prototype._addPicToGallery = function (picFile) {
        try {
            var exifInterface = new android.media.ExifInterface(picFile.getPath());
            var tagOrientation = exifInterface.getAttribute('Orientation');
            camera_plus_common_1.CLog("tagOrientation = " + tagOrientation);
            var contentUri = android.net.Uri.fromFile(picFile);
            var mediaScanIntent = new android.content.Intent('android.intent.action.MEDIA_SCANNER_SCAN_FILE', contentUri);
            app.android.context.sendBroadcast(mediaScanIntent);
        }
        catch (ex) {
            camera_plus_common_1.CLog('_addPicToGallery error', ex);
            this.sendEvent(CameraPlus.errorEvent, ex, 'Error adding image to device library.');
        }
    };
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", Object)
    ], CameraPlus.prototype, "cameraId", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", Boolean)
    ], CameraPlus.prototype, "autoFocus", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", String)
    ], CameraPlus.prototype, "flashOnIcon", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", String)
    ], CameraPlus.prototype, "flashOffIcon", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", String)
    ], CameraPlus.prototype, "toggleCameraIcon", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", Boolean)
    ], CameraPlus.prototype, "confirmPhotos", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", Boolean)
    ], CameraPlus.prototype, "saveToGallery", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", String)
    ], CameraPlus.prototype, "takePicIcon", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", String)
    ], CameraPlus.prototype, "galleryIcon", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", Boolean)
    ], CameraPlus.prototype, "insetButtons", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", Number)
    ], CameraPlus.prototype, "insetButtonsPercent", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", Boolean)
    ], CameraPlus.prototype, "enableVideo", void 0);
    __decorate([
        camera_plus_common_1.GetSetProperty(),
        __metadata("design:type", Boolean)
    ], CameraPlus.prototype, "isRecording", void 0);
    return CameraPlus;
}(camera_plus_common_1.CameraPlusBase));
exports.CameraPlus = CameraPlus;
//# sourceMappingURL=camera-plus.android.js.map