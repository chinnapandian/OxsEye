"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var file_system_1 = require("tns-core-modules/file-system");
var router_1 = require("nativescript-angular/router");
var page_1 = require("tns-core-modules/ui/page");
var router_2 = require("@angular/router");
var transformedimage_provider_1 = require("../providers/transformedimage.provider");
var image_source_1 = require("tns-core-modules/image-source");
var application = require("tns-core-modules/application");
var dialogs = require("tns-core-modules/ui/dialogs");
var Toast = require("nativescript-toast");
var Permissions = require("nativescript-permissions");
var item;
var prevDeltaX;
var prevDeltaY;
var startScale = 1;
var ImageSlideComponent = (function () {
    function ImageSlideComponent(zone, page, routerExtensions, route, transformedImageProvider) {
        var _this = this;
        this.zone = zone;
        this.page = page;
        this.routerExtensions = routerExtensions;
        this.route = route;
        this.transformedImageProvider = transformedImageProvider;
        this.route.queryParams.subscribe(function (params) {
            _this.imgURI = params["imgURI"];
            _this.imgIndex = params["imgIndex"];
            console.log(_this.imgURI + ' ' + _this.imgIndex);
        });
    }
    ImageSlideComponent.prototype.ngOnDestroy = function () {
    };
    ImageSlideComponent.prototype.ngOnInit = function () {
        this.imgNext = this.imgIndex;
        this.isBusy = false;
        this.isBack = false;
        this.isDeleting = true;
        this.isSharing = true;
        this.imageSource = new image_source_1.ImageSource();
        this.imageFileList = this.transformedImageProvider.imageList;
    };
    ImageSlideComponent.prototype.goBack = function () {
        // this.isBusy = true;
        this.routerExtensions.back();
    };
    ImageSlideComponent.prototype.onPinch = function (args) {
        if (args.state === 1) {
            var newOriginX = args.getFocusX() - item.translateX;
            var newOriginY = args.getFocusY() - item.translateY;
            var oldOriginX = item.originX * item.getMeasuredWidth();
            var oldOriginY = item.originY * item.getMeasuredHeight();
            item.translateX += (oldOriginX - newOriginX) * (1 - item.scaleX);
            item.translateY += (oldOriginY - newOriginY) * (1 - item.scaleY);
            item.originX = newOriginX / item.getMeasuredWidth();
            item.originY = newOriginY / item.getMeasuredHeight();
            startScale = item.scaleX;
        }
        else if (args.scale && args.scale !== 1) {
            var newScale = startScale * args.scale;
            newScale = Math.min(8, newScale);
            newScale = Math.max(0.125, newScale);
            item.scaleX = newScale;
            item.scaleY = newScale;
        }
    };
    ImageSlideComponent.prototype.onPan = function (args) {
        if (args.state === 1) {
            prevDeltaX = 0;
            prevDeltaY = 0;
        }
        else if (args.state === 2) {
            item.translateX += args.deltaX - prevDeltaX;
            item.translateY += args.deltaY - prevDeltaY;
            prevDeltaX = args.deltaX;
            prevDeltaY = args.deltaY;
        }
    };
    ImageSlideComponent.prototype.onDoubleTap = function (args) {
        item.animate({
            translate: { x: 0, y: 0 },
            scale: { x: 1, y: 1 },
            curve: "easeIn",
            duration: 10
        }).then(function () {
        });
    };
    ImageSlideComponent.prototype.pageLoaded = function (args) {
        if (this.imageFileList.length > 0)
            this.imageSource = this.imageFileList[this.imgIndex].filePath;
        var page = args.object;
        item = page.getViewById("imgSlideId");
        item.translateX = 0;
        item.translateY = 0;
        item.scaleX = 1;
        item.scaleY = 1;
    };
    ImageSlideComponent.prototype.onSwipe = function (args) {
        this.direction = args.direction;
        if (args.direction == 2 || !this.direction) {
            this.imgNext++;
            if (this.imgNext <= 0 || this.imgNext >= this.imageFileList.length)
                this.imgNext = 0;
        }
        else if (args.direction == 1) {
            this.imgNext--;
            if (this.imgNext < 0 || this.imgNext >= this.imageFileList.length)
                this.imgNext = (this.imageFileList.length - 1);
        }
        this.imgIndex = this.imgNext;
        if (this.imageFileList.length > 0)
            this.imageSource = this.imageFileList[this.imgNext].filePath;
        else {
            this.imageSource = null;
            this.isDeleting = false;
            this.isSharing = false;
            Toast.makeText("No image available.").show();
        }
        this.onDoubleTap(args);
    };
    ImageSlideComponent.prototype.getOriginalImage = function (transformedImage) {
        var imagePath = new java.io.File(android.os.Environment.getExternalStorageDirectory() + '/DCIM/CAMERA', ".");
        var imgFileNameOrg = transformedImage.replace('PT_IMG', 'IMG');
        imgFileNameOrg = imgFileNameOrg.replace('_transformed.png', '.jpg');
        var newFile = new java.io.File(imagePath, imgFileNameOrg);
        var uri = android.support.v4.content.FileProvider.getUriForFile(application.android.context, "oxs.eye.fileprovider", newFile);
        application.android.context.grantUriPermission("oxs.eye.fileprovider", uri, android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION);
        return uri;
    };
    ImageSlideComponent.prototype.onShare = function () {
        var _this = this;
        Permissions.requestPermission([android.Manifest.permission.READ_EXTERNAL_STORAGE, android.Manifest.permission.WRITE_EXTERNAL_STORAGE, android.Manifest.permission.INTERNET], "Needed for sharing files").then(function () {
            try {
                var uris = new java.util.ArrayList();
                var filesToBeAttached = '';
                var imagePath = new java.io.File(android.os.Environment.getExternalStorageDirectory() + '/DCIM', ".");
                var imgFileNameOrg = _this.imageFileList[_this.imgNext].fileName;
                imgFileNameOrg = imgFileNameOrg.replace('thumb_PT_IMG', 'PT_IMG');
                var newFile = new java.io.File(imagePath, imgFileNameOrg);
                var uri = android.support.v4.content.FileProvider.getUriForFile(application.android.context, "oxs.eye.fileprovider", newFile);
                application.android.context.grantUriPermission("oxs.eye.fileprovider", uri, android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION);
                uris.add(uri);
                uris.add(_this.getOriginalImage(imgFileNameOrg));
                filesToBeAttached = filesToBeAttached.concat(',' + _this.imageFileList[_this.imgNext].filePath);
                if (uris.size() > 0) {
                    var intent = new android.content.Intent(android.content.Intent.ACTION_SEND_MULTIPLE);
                    intent.setType("text/plain");
                    var message = "File(s) to be shared : " + filesToBeAttached + ".";
                    intent.putExtra(android.content.Intent.EXTRA_SUBJECT, "File(s) to be shared...");
                    intent.putParcelableArrayListExtra(android.content.Intent.EXTRA_STREAM, uris);
                    intent.putExtra(android.content.Intent.EXTRA_TEXT, message);
                    intent.addFlags(android.content.Intent.FLAG_GRANT_READ_URI_PERMISSION);
                    intent.addFlags(android.content.Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
                    application.android.foregroundActivity.startActivity(android.content.Intent.createChooser(intent, "Send mail..."));
                }
            }
            catch (e) {
                Toast.makeText("Error while sending mail." + e).show();
                console.log("is exception raises during sending mail " + e);
            }
        }).catch(function () {
            Toast.makeText("Error in giving permission.").show();
            console.log("Permission is not granted (sadface)");
        });
    };
    ImageSlideComponent.prototype.onDelete = function (args) {
        var _this = this;
        dialogs.confirm({
            title: "Delete",
            message: "Deleting selected item(s)...",
            okButtonText: "Ok",
            cancelButtonText: "Cancel"
        }).then(function (result) {
            if (result) {
                if (_this.imageFileList.length > 0) {
                    var file = file_system_1.File.fromPath(_this.imageFileList[_this.imgNext].filePath);
                    file.remove()
                        .then(function (res) {
                        var thumbnailFile = file_system_1.File.fromPath(_this.imageFileList[_this.imgNext].thumbnailPath);
                        thumbnailFile.remove()
                            .then(function (res) {
                            _this.imageFileList.splice(_this.imgNext, 1);
                            Toast.makeText("Selected image deleted.").show();
                            _this.onSwipe(args);
                        }).catch(function (err) {
                            console.log('Error while deleting thumbnail image. ' + err.stack);
                        });
                    }).catch(function (err) {
                        console.log('Error while deleting original image. ' + err.stack);
                    });
                }
                else {
                    _this.imageSource = null;
                    _this.isDeleting = false;
                    _this.isSharing = false;
                    Toast.makeText("No image available.").show();
                }
            }
        });
    };
    return ImageSlideComponent;
}());
ImageSlideComponent = __decorate([
    core_1.Component({
        selector: "ns-imageslide",
        moduleId: module.id,
        styleUrls: ['./imageslide.component.css'],
        templateUrl: "./imageslide.component.html",
    }),
    __metadata("design:paramtypes", [core_1.NgZone,
        page_1.Page,
        router_1.RouterExtensions,
        router_2.ActivatedRoute,
        transformedimage_provider_1.TransformedImageProvider])
], ImageSlideComponent);
exports.ImageSlideComponent = ImageSlideComponent;
//# sourceMappingURL=data:application/json;base64,